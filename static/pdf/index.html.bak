
<!DOCTYPE html>
<html dir="ltr" mozdisallowselectionprint>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="google" content="notranslate">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>PDF.js viewer</title>
  <script src="//cdn.jsdelivr.net/npm/eruda"></script>
  <script>eruda.init();</script>
  <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
  <script src="https://mozilla.github.io/pdf.js/build/pdf.worker.js"></script>
  <link rel="stylesheet" type="text/css" href="https://mozilla.github.io/pdf.js/web/viewer.css" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    html,
    body {
      width: 100%;
      height: 100%;
    }

    #viewer {
      /* width: 100%; */
      /* height: 100%; */
      /* background: #404040; */
      /* width: 500px; */
    }

    /* .page {
      position: relative;
    }

    .page .textLayer {
      position: absolute;
      top: 0;
      left: 0;
    }

    .page .textLayer > span {
      color: transparent;
      position: absolute;
      white-space: pre;
      cursor: text;
      transform-origin: 0% 0%;
    } */

    #viewerContainer {
      top: 0 !important;
      width: 360px;
      margin: 0 auto;
    }

    #viewerContainer::-webkit-scrollbar {
      -webkit-appearance: none;
      background-color: transparent;
      width: 7px;
      height: 7px;
    }

    #viewerContainer::-webkit-scrollbar-thumb {
      background: rgba(187,191,196,0.5);
      width: 7px;
      border-radius: 3px;
      display: block;
      min-height: 38px;
    }

    #viewerContainer::-webkit-scrollbar-track {
      background-color: transparent;
      display: block;
    }
    
    #viewerContainer:not(.pdfPresentationMode) {
      transition-duration: 200ms;
      transition-timing-function: ease;
    }

    .page {
      margin: 0px auto 10px auto !important;
      border: none !important;
    }
  </style>
  <script>
    const url = new URLSearchParams(window.location.search).get('url') || '/static/pdf.pdf';

    const PDFJS = pdfjsLib;

    function createPDFContainer(page, id, className) {
      var pdfContainer = document.getElementById('viewer');
      var divContainer = document.createElement('div');

      divContainer.className = `page page-${page}` ;
      divContainer.style.display = 'flex';
      divContainer.style.justifyContent = 'center';
      // divContainer.style.marginBottom = '4px';

      var canvasNew = document.createElement('canvas');
      canvasNew.id = id;
      canvasNew.className = className;
      divContainer.appendChild(canvasNew);
      pdfContainer.appendChild(divContainer);
    }

    function renderPDF(pdf, pageNum, canvasId) {
      window.pdf = pdf;
      return pdf.getPage(pageNum)
        .then(page => {
          var viewer = document.querySelector('#viewer');
          // var containerWidth = +(window.getComputedStyle(viewer).width.replace('px', ''));
          var containerWidth = viewer.getBoundingClientRect().width;
          // var containerWidth = window.innerWidth;

          var _viewport = page.getViewport({ scale: 1 });
          var scale = containerWidth / _viewport.width;

          var viewport = page.getViewport({ scale });

          console.log('viewBox', viewport.viewBox);
          
          window.page = page

          var canvas = document.getElementById(canvasId);
          var parent = canvas.parentNode;
          var context = canvas.getContext('2d');
          canvas.height = viewport.height;
          canvas.width = viewport.width;
          parent.style.width = `${viewport.width}px`;
          parent.style.height = `${viewport.height}px`;

          var renderContext = {
            canvasContext: context,
            viewport: viewport,
          };

          page
            .render(renderContext)
            .promise
            .then(() => {
              return page.getTextContent();
            })
            .then((textContent) => {
              const canvas = document.querySelector(`canvas#cw-pdf-${pageNum}`);
              const parent = canvas.parentNode;

              const textLayerDiv = document.createElement('div');
              textLayerDiv.className = 'textLayer';
              textLayerDiv.style.width = `${canvas.width}px`;
              textLayerDiv.style.height = `${canvas.height}px`;

              parent.appendChild(textLayerDiv);

              const textLayer = pdfjsLib
                .renderTextLayer({
                  container: textLayerDiv,
                  textContent,
                  viewport,
                });

              // textLayer.setTextContent(textContent);

              // textLayer.render();
            });
        });
    }

    function createSeriesCanvas(num, template) {
      var id = '';
      for (var page = 1; page <= num; page++) {
        id = template + page;
        createPDFContainer(page, id, 'pdfClass');
      }
    }

    function loadPDF(fileURL) {
      return PDFJS.getDocument(fileURL).promise.then(function (pdf) {
        //用 promise 获取页面
        var id = '';
        var idTemplate = 'cw-pdf-';
        var pageNum = pdf.numPages;
        //根据页码创建画布
        createSeriesCanvas(pageNum, idTemplate);

        //将pdf渲染到画布上去
        for (var i = 1; i <= pageNum; i++) {
          id = idTemplate + i;
          renderPDF(pdf, i, id);
        }
      });
    }

    loadPDF(url)
      // .then(pdf => {
      //   renderPDF(pdf);
      // });

  </script>
</head>

<body tabindex="1" class="loadingInProgress">
  <div id="outerContainer">
    <div id="sidebarContainer" class="sidebarHide">
      <div id="sidebarContent">
        <div id="thumbnailView"></div>
        <div id="outlineView" class="hidden"></div>
        <div id="attachmentsView" class="hidden"></div>
      </div>
    </div>


    <div id="mainContainer">
      <div id="viewerContainer" tabindex="0">
        <div id="viewer" class="pdfViewer">

        </div>
      </div>
    </div>

  </div>

  <div id="printContainer"></div>
</body>

</html>